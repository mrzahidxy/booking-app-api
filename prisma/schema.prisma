generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  phone     String?
  password  String
  createdAt DateTime  @default(now())
  name      String?
  roleId    Int?
  updateAt  DateTime  @updatedAt
  bookings  Booking[]
  Role      Role?     @relation(fields: [roleId], references: [id])
  Review    Review[]
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  rolePermission RolePermission[]
  Users          User[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  RolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  image       String[]
  description String?
  amenities   String[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  ratings     Float?   @default(0.0)
  reviews     Review[]
  rooms       Room[]
}

model Room {
  id        Int       @id @default(autoincrement())
  hotelId   Int
  price     Float
  image     String[]
  roomType  RoomType  @default(SINGLE)
  amenities String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
}

model Restaurant {
  id        Int       @id @default(autoincrement())
  name      String
  location  String
  image     String?
  cuisine   String
  ratings   Float     @default(0.0)
  reviews   Review[]
  seats     Int?
  menu      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Review {
  id           Int         @id @default(autoincrement())
  userId       Int
  hotelId      Int?
  restaurantId Int?
  rating       Int
  review       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  hotel        Hotel?      @relation(fields: [hotelId], references: [id])
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Booking {
  id           Int           @id @default(autoincrement())
  userId       Int
  roomId       Int?
  restaurantId Int?
  bookingDate  DateTime
  totalPrice   Float
  partySize    Int?
  timeSlot     String?
  status       BookingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
  room         Room?         @relation(fields: [roomId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  TRIPLE
}
