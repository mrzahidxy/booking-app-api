generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  phone        String?
  password     String
  createdAt    DateTime       @default(now())
  name         String?
  roleId       Int?
  updateAt     DateTime       @updatedAt
  bookings     Booking[]
  role         Role?          @relation(fields: [roleId], references: [id])
  review       Review[]
  notification Notification[]
  fcmToken     String?        @unique
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  body      String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, read])
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  rolePermission RolePermission[]
  users          User[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String   @unique
  rolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  image       String[]
  description String?
  amenities   String[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  ratings     Float?   @default(0.0)
  reviews     Review[]
  rooms       Room[]
}

model Room {
  id        Int       @id @default(autoincrement())
  hotelId   Int
  price     Float
  image     String[]
  roomType  RoomType  @default(SINGLE)
  quantity  Int       @default(1)
  amenities String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
}

model Restaurant {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  location    String
  timeSlots   TimeSlotType[]
  image       String[]
  cuisine     String[]
  ratings     Float          @default(0.0)
  reviews     Review[]
  seats       Int?
  menu        Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  bookings    Booking[]
}

model Review {
  id           Int         @id @default(autoincrement())
  userId       Int
  hotelId      Int?
  restaurantId Int?
  rating       Int
  review       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  hotel        Hotel?      @relation(fields: [hotelId], references: [id])
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Booking {
  id           Int           @id @default(autoincrement())
  userId       Int
  roomId       Int?
  restaurantId Int?
  bookingDate  DateTime
  totalPrice   Float
  roomQuantity Int?
  partySize    Int?
  timeSlot     String?
  status       BookingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
  room         Room?         @relation(fields: [roomId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  TRIPLE
}

enum TimeSlotType {
  MORNING
  NOON
  AFTERNOON
  EVENING
  NIGHT
}

